openapi: 3.0.3
info:
  title: Family Checker API
  version: 1.0.0
  description: |
    An API that used to check if a person meets certain criteria.

paths:
  /v1/people:
    delete:
      summary: Permanently delete person(s) by external ID
      description: >
        Deletes the person(s) with the specified external ID(s).
        Once deleted, these IDs will be remembered and ignored in all future operations.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int64
              example: [ 101, 102, 103 ]
      responses:
        '204':
          description: Successfully deleted (or already deleted) and remembered.
        '400':
          description: Invalid input format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Return the details of all matching entries
      description: >
        Attempt to match and return details for all the provided data.
      responses:
        '201':
          description: Full person object with expanded relations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullPerson'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonDetailsRequest'

  /v1/people/check-existing-person:
    post:
      summary: Submit a person record to check.
      description: >
        API is used to check if the submitted details:
        
        1. Matches a person record in the database.
        2. The matched person has a partner.
        3. The matched person has exactly 3 children, all of whom list the same partner (from point 2) as the other parent.
        4. At least one of the children (from point 3) is under 18 years of age.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpecificPersonCheckRequest'
      responses:
        '200': # ok
          description:
            The response code returned if - 
            The person submitted in the API has 3 children with their partner and one of the children is under 18.
        '444': # NO RESPONSE
          description:
            The response code returned if -
            If the person has no record, no partner, does not have 3 children or none of their children is
            under 18.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    PersonDetailsRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 42
        name:
          type: string
          example: Ada Lovelace
        birthDate:
          type: string
          format: date
          example: "1815-12-10"
        parent1:
          $ref: '#/components/schemas/Relation'
        parent2:
          $ref: '#/components/schemas/Relation'
        partner:
          $ref: '#/components/schemas/Relation'
        children:
          type: array
          items:
            $ref: '#/components/schemas/Relation'
    Relation:
      type: object
      properties:
        id:
          type: integer
          format: int64


    FullPerson:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 42
        name:
          type: string
          example: Ada Lovelace
        birthDate:
          type: string
          format: date
          example: "1815-12-10"
        parent1:
          $ref: '#/components/schemas/PersonBasic'
        parent2:
          $ref: '#/components/schemas/PersonBasic'
        partner:
          $ref: '#/components/schemas/PersonBasic'
        children:
          type: array
          items:
            $ref: '#/components/schemas/PersonBasic'

    PersonBasic:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        birthDate:
          type: string
          format: date

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: "ERR_NO_MATCH"
          description: Application-specific error code
        message:
          type: string
          example: "No matching person found or criteria not met"
          description: Human-readable explanation of the error
        requestId:
          type: string
          example: "RQ0001"
          description: Optional request ID to trace logs
    SpecificPersonCheckRequest:
      type: object
      properties:
        requestId:
          type: string
          example: RQ0001
          description: ID of the request used for logging. If not provided one will be generated.
        # Design note:
        ##############
        # Did a bit of googling on this one. Hopefully it's correct.
        id:
          type: integer
          format: int64
          example: 123456782
          description: The ID of the person.
        name:
          type: string
          example: "Jane"
          description: The name of the person.
        dateOfBirth:
          type: string
          format: date
          example: "1990-05-20"
          description: Date of birth in YYYY-MM-DD format.
